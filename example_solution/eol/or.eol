import "equivalence.eol";
import "petri_net_navigation.eol";

operation Transition applyOrRule() : Map {
	var result = Map{'a_transition_was_reduced?' = false, 'impacted_transitions' = Set {}, 'deleted_transition' = null};

	-- This step is only allowed "when the preset and postset of transition are both singletons"
	if (self.prep.size() == 1 and self.postp.size() == 1) {
		var q = self.prep.first;
		var r = self.postp.first;
	
		if ((q == r) or not q.shares_a_transition_with?(r)) {
			("Performing OR reduction for e=" + self.name + ", q=" + q.name + ",r=" + r.name).println();
		
			var merger = q.equivalent();
			var mergee = r.equivalent();

			merger.contains.add(self.equivalent());
			
			if (q <> r) {
				// Update statechart
				merger.name = merger.name + mergee.name; 
				merger.contains.addAll(mergee.contains);	
				delete mergee;
				
				// Update Petri net
				q.name = q.name + r.name;
				q.pret.addAll(r.pret);
				q.postt.addAll(r.postt);
				delete r;
			}
						
			result.put('impacted_transitions', self.neighbours_and_siblings());
			result.put('deleted_transition', self);
			result.put('a_transition_was_reduced?', true);
			
			delete self;
		}
	}

	return result;
}

operation Place shares_a_transition_with?(other : Place) : Boolean {
	return self.pret.exists(e|e.postp.includes(other)) or 
	       self.postt.exists(e|e.prep.includes(other));
}