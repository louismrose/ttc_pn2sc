#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass eptcs
\begin_preamble

\providecommand{\event}{TTC 2013} 

\def\titlerunning{Petri Nets to Statecharts}
\def\authorrunning{P. {Van Gorp} and L.M. Rose}

\usepackage{url}\usepackage{color}\usepackage{listings}


\title{The Petri-Nets to Statecharts Transformation Case}

\author{Pieter Van Gorp \institute{Eindhoven University of Technology, PO Box 513, 5600 MB Eindhoven, The Netherlands.} \email{p.m.e.v.gorp@tue.nl} \and Louis M. Rose \institute{Department of Computer Science, University of York, UK.} \email{louis.rose@york.ac.uk}}
\end_preamble
\options submission,copyright,creativecommons
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter courier
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
TODO: 
\end_layout

\begin_layout Itemize
Abstract 
\end_layout

\begin_layout Itemize
Nice healthcare example
\end_layout

\begin_layout Itemize
Describe the huge models for stresstesting
\end_layout

\begin_layout Itemize
Cite MODELS paper for the results of Java, GrGen, and mention that Epsilon
 is X times slower for now.
 
\end_layout

\begin_layout Itemize
Evaluation criteria: table
\end_layout

\begin_layout Itemize
Elaborate text for bonus features
\end_layout

\begin_layout Itemize
Create ZIP attachment with testsuite models
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Although transformations are already developed for decades in various communitie
s (such as the compiler community
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Bacon1994compilertrans"

\end_inset

, the program transformation community
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Feather87progtranssurv"

\end_inset

 and the business process management (BPM) community
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Lohmann09BPMtransSurv"

\end_inset

), it is relatively new to study the strengths and weaknesses from transformatio
n approaches across community boundaries.
 The aim of the Transformation Tool Contest (TTC) is to compare the expressivene
ss, the usability and the performance of graph and model transformation
 tools along a number of selected case studies.
 A deeper understanding of the relative merits of different tool features
 will help to further improve graph and model transformation tools and to
 indicate open problems
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "TTC11Proceedings"

\end_inset

.
 This paper proposes a case for the sixth edition of TTC (i.e., to TTC'13).
\end_layout

\begin_layout Subsection
Context of the Case
\end_layout

\begin_layout Standard
In BPM research and practice, transformations are usually programmed using
 general purpose programming languages.
 Mapping rules in BPM literature tend to be formalized using mathematical
 set constructs whereas they tend to be documented using informal visual
 rules and implemented in Java or another general purpose programming language.
 In the graph and model transformation communities, special purpose languages
 and tools are being developed to support the direct execution of such mapping
 rules.
 Finally, various comparative studies have been contributed to the emerging
 field of transformation engineering (cfr.,
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Taentzer2005_ModelTransformationsbyGraphTransformationsAComparativeStudy,Varro2008_TransformationofUMLModelstoCSPACaseStudyforGraphTransformationTools,Rensink2010_Graphtransformationtoolcontest2008,Gronmo2009_ComparisonofThreeModelTransformationLanguages,Rose2009_AnAnalysisofApproachestoModelMigration,rose10comparison,vAmstel2011ATLQVTperfAnal,Tolosa2011TSMatlMeasurement"

\end_inset

) but too little transformation problems have been considered that are considere
d challenging by the BPM community.
 This paper proposes the so-called PN2SC case, related to the transformation
 of Petri-Nets to statecharts.
 The case relates to an active research line at Eindhoven University of
 Technology.
 Interestingly, much of the associated research efforts have been spent
 on an optimization algorithm which turns out to be irrelevant when using
 a rule-based transformation approach instead of an imperative programming
 approach
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "VanGorp2010MoDELS"

\end_inset

.
 Therefore, the case can be considered a nice showcase for demonstrating
 to the BPM community the potential impact of results from the transformation
 community.
\end_layout

\begin_layout Subsection
Relevance for TTC'13
\end_layout

\begin_layout Standard
Besides providing 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%interesting
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

input to BPM industry and its research community, this study also covers
 a previously unstudied type of transformation.
 More specifically, the transformation problem under study is a process
 model translation that raises the abstraction level.
 Regardless of concrete language and metamodel details, this type of problem
 has not yet been considered for the evaluation of transformation approaches.
 
\end_layout

\begin_layout Standard
In the following, we briefly survey existing comparative studies related
 to process models.
 Varró et al.
 studied various approaches to mapping conceptual process model in UML to
 more technical CSP models
\begin_inset space ~
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Varro2008_TransformationofUMLModelstoCSPACaseStudyforGraphTransformationTools"

\end_inset

.
 Also, in a special issue edited by Rensink et al., various experts present
 their solutions to a case study concerning the mapping of conceptual process
 models in BPMN to more technical BPEL models
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Rensink2010_Graphtransformationtoolcontest2008"

\end_inset

.
 Grønmo et al.
 discuss various approaches to transforming conceptual UML models into strictly
 structured counter-parts
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Gronmo2009_ComparisonofThreeModelTransformationLanguages"

\end_inset

.
 Again, the target models are more low-level than the input models.
 Rose et al.
 discuss different approaches to migrating Petri-Net models
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "rose10comparison"

\end_inset

.
 In that case, input models are at the same level of abstraction as output
 models.
 
\end_layout

\begin_layout Standard
Van Gorp et al.
 have already considered the case proposed by this paper for comparing a
 graph transformation approach to the Java-based programming approach that
 is mainstream in the BPM domain.
 The authors make the interesting observation that the rule-based approach
 required less specification efort yet delivered superior performance.
 By submitting this case to TTC'13, we aim at analyzing the generalizability
 of that observation.
\end_layout

\begin_layout Subsection
Input and Output Languages
\end_layout

\begin_layout Standard
TODO: copy/paste some background about petri-nets and statecharts, also
 cite some papers about safe nest, workflow nets.
\end_layout

\begin_layout Section
The Transformation
\end_layout

\begin_layout Standard
This section details the Petri-Net to statechart transformation algorithm,
 originally described by Eshuis 
\begin_inset CommandInset citation
LatexCommand cite
key "eshuis09translating"

\end_inset

.
 The transformation described below is 
\emph on
input-destructive
\emph default
 (elements of the Petri-Net model are removed as the transformation proceeds),
 and uses the metamodels shown in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:mms"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tb
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centerline{
\end_layout

\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/PetriNets.pdf
	width 45line%

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/StateCharts.pdf
	width 50line%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(a) Petri-Net metamodel 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(b) Statechart metamodel 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:mms"

\end_inset

The metamodels used in the PN2SC transformation.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Preconditions
\end_layout

\begin_layout Standard
The following assumptions can be made regarding the context in which the
 PN2SC transformation is started: 
\end_layout

\begin_layout Itemize
there is only one instance of 
\family typewriter
Net
\family default
,
\end_layout

\begin_layout Itemize
there are no 
\family typewriter
Statechart
\family default
 nor 
\family typewriter
State
\family default
 instances.
\end_layout

\begin_layout Subsection
Initialisation
\end_layout

\begin_layout Standard
The first step in the PN2SC transformation involves creating an initial
 structure for the statechart model.
 In particular, the following statechart model elements are created:
\end_layout

\begin_layout Itemize
For every 
\family typewriter
Place
\family default
 
\begin_inset Formula $p$
\end_inset

 in the Petri-Net: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subitem
\end_layout

\end_inset

 an instance of 
\family typewriter
Basic
\family default
, 
\begin_inset Formula $b$
\end_inset

 (with 
\begin_inset Formula $b.name=p.name$
\end_inset

), 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subitem
\end_layout

\end_inset

 an instance of 
\family typewriter
OR
\family default
, 
\begin_inset Formula $o$
\end_inset

 such that 
\begin_inset Formula $o.contains=\{b\}$
\end_inset

,
\end_layout

\begin_layout Itemize
For every 
\family typewriter
Transition
\family default
 
\begin_inset Formula $t$
\end_inset

 in the Petri-Net: 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subitem
\end_layout

\end_inset

 an instance of 
\family typewriter
HyperEdge
\family default
 
\begin_inset Formula $e$
\end_inset

 (with 
\begin_inset Formula $e.name=t.name$
\end_inset

),
\begin_inset Note Note
status collapsed

\begin_layout Itemize
[REMOVED, since this should be realized only if there is at the end one
 toplevel AND: A single instance of 
\family typewriter
AND
\family default
, 
\begin_inset Formula $a$
\end_inset

 such that: 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subitem
\end_layout

\end_inset

 
\begin_inset Formula $s.topstate=a$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subitem
\end_layout

\end_inset

 
\begin_inset Formula $\forall o:o.rcontains=a$
\end_inset

 (i.e., every instance of 
\family typewriter
OR
\family default
 is contained in 
\begin_inset Formula $a$
\end_inset

) 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
All 
\family typewriter
pret/postp
\family default
 and 
\family typewriter
postt/prep 
\family default
arcs should be mapped to 
\family typewriter
next/rnext
\family default
 links between the 
\family typewriter
States
\family default
 equivalent with the input 
\family typewriter
NamedElements
\family default
 that are connected by these arcs.
\end_layout

\begin_layout Paragraph
Equivalence.
\end_layout

\begin_layout Standard
Initialisation should also provide a mechanism for identifying the 
\family typewriter
OR
\family default
 node created for a particular 
\family typewriter
Place
\family default
 and the 
\family typewriter
HyperEdge
\family default
 created for a particular 
\family typewriter
Transition
\family default
.
 The precise mechanism can vary over implementations.
 One approach is to use a name-based identification (e.g., assign all 
\family typewriter
Places
\family default
 a uniquely identifying name and copy each 
\family typewriter
Place's
\family default
 name to its 
\family typewriter
OR
\family default
 node during initialisation.) Another approach is to create traceability
 links between corresponding source and target elements.
 In the remainder of this section we assume that the initialisation of the
 transformation will construct an injective function 
\begin_inset Formula $equiv:Place\to OR$
\end_inset

.
\end_layout

\begin_layout Subsection
Reduction rules
\end_layout

\begin_layout Standard
Following initialisation, the transformation continues by applying one of
 two types of reduction rules: AND and OR.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
irrelevant: This section describes these two types of reduction rule, after
 briefly discussing the order in which the rules should be applied.
 
\end_layout

\begin_layout Plain Layout
Precedence
\end_layout

\begin_layout Plain Layout
Correctness of the PN2SC transformation necessitates two types of precedence
 for the application of the AND and OR merging rules.
 Firstly, transitions that are more deeply nested take precedence over less
 nested transitions, as described below.
 Secondly, AND reductions always take precedence over OR reductions.
\end_layout

\begin_layout Plain Layout
A (partial) ordering of transitions can be computed by using the ordering
 constraint, 
\begin_inset Formula $\prec$
\end_inset

, described by Eshuis
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "eshuis09translating"

\end_inset

.
 For the transitions 
\begin_inset Formula $t_{1}$
\end_inset

 and 
\begin_inset Formula $t_{2}$
\end_inset

: 
\begin_inset Formula $t_{1}\prec t_{2}\Rightarrow(t_{1}.prep\subset t_{2}.postp\lor t_{1}.postp\subset t_{2}.prep)$
\end_inset

, where 
\begin_inset Formula $\subset$
\end_inset

 is used to mean a strict and non-empty subset.
 A transition 
\begin_inset Formula $t$
\end_inset

 can be reduced (using the AND and OR rules described below) iff there exists
 no other transition 
\begin_inset Formula $t'$
\end_inset

 such that 
\begin_inset Formula $t'\prec t$
\end_inset

.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eol-precedence"

\end_inset

 shows an implementation of the 
\begin_inset Formula $\prec$
\end_inset

 in the Epsilon Object Language 
\begin_inset CommandInset citation
LatexCommand cite
key "kolovos06eol"

\end_inset

 (a reworking and extension of OCL).
\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\size tiny
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{eolPrec.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:eol-precedence"

\end_inset

EOL code for computing the precedence of transitions.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tb
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centerline{
\end_layout

\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/figs-R1a.png
	lyxscale 50
	width 45line%

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/figs-R2.png
	lyxscale 50
	width 50line%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(a) rule for creating 
\emph on
AND nodes
\emph default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(b) rule for merging 
\emph on
OR nodes
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Visual-documentation-for-rules"

\end_inset

Visual documentation for mapping rules.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
AND rules
\end_layout

\begin_layout Standard
The first type of reduction rule, AND (informally documented by Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visual-documentation-for-rules"

\end_inset

.a), constructs an 
\family typewriter
AND
\family default
 state for a set of 
\family typewriter
Places
\family default
 that are connected to the same incoming and outgoing 
\family typewriter
Transitions
\family default
.
\end_layout

\begin_layout Paragraph
Pre-conditions.
\end_layout

\begin_layout Standard
The AND rule can be applied to a 
\family typewriter
Transition
\family default
, 
\begin_inset Formula $t$
\end_inset

, iff 
\begin_inset Formula $\left|t.prep\right|>1$
\end_inset

 and every 
\family typewriter
Place
\family default
 in 
\begin_inset Formula $t.prep$
\end_inset

 is connected to the same set of outgoing transitions and the same set of
 incoming transitions.
 Alternatively, the AND rule can be applied to a 
\family typewriter
Transition
\family default
, 
\begin_inset Formula $t$
\end_inset

 iff 
\begin_inset Formula $\left|t.postp\right|>1$
\end_inset

 and every 
\family typewriter
Place
\family default
 in 
\begin_inset Formula $t.postp$
\end_inset

 is connected to the same set of outgoing transitions and the same set of
 incoming transitions.
 Given these two alternative situations, we refer to two AND rules.
 However, in some languages one can implement these variants in one rule.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visual-documentation-for-rules"

\end_inset

.a illustrates when the AND rule for the situation 
\begin_inset Formula $\left|t.prep\right|>1$
\end_inset

 would be applicable: 
\begin_inset Formula $q_{1}$
\end_inset

 to 
\begin_inset Formula $q_{n}$
\end_inset

 all have 
\begin_inset Formula $\{t$
\end_inset

} as the set of outgoing transitions while they share 
\begin_inset Formula $\{t_{1},t_{2}\}$
\end_inset

 as the set of incoming transitions.
 
\begin_inset Formula $q_{n}$
\end_inset

 should not have an outgoing arc to a transition for which there is no correspon
ding arc between 
\begin_inset Formula $q_{1}$
\end_inset

 and that transition.
 Conversely, 
\begin_inset Formula $q_{1}$
\end_inset

 should not have an incoming arc from a transition for which there is no
 corresponding arc between that transition and 
\begin_inset Formula $q_{n}$
\end_inset

.
 To illustrate the situation when the AND rule for the situation 
\begin_inset Formula $\left|t.postp\right|>1$
\end_inset

 would be applicable, one can simply reverse all arcs in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visual-documentation-for-rules"

\end_inset

.a.
\end_layout

\begin_layout Paragraph
Effect on statechart.
\end_layout

\begin_layout Standard
Applying the AND rule results in the creation of a new 
\family typewriter
AND
\family default
 state (
\begin_inset Formula $a$
\end_inset

) and a new 
\family typewriter
OR
\family default
 state (
\begin_inset Formula $p$
\end_inset

) such that 
\begin_inset Formula $p.contains={a}$
\end_inset

 and 
\begin_inset Formula $a.contains$
\end_inset

 is the set of 
\family typewriter
OR
\family default
 states 
\begin_inset Formula $\{q\in t.prep:equiv(q)\}$
\end_inset

; or 
\begin_inset Formula $\{q\in t.postp:equiv(q)\}$
\end_inset

 if the rule has been applied to the transition's postset, 
\begin_inset Formula $t.postp$
\end_inset

.
\end_layout

\begin_layout Paragraph
Effect on Petri-Net.
\end_layout

\begin_layout Standard
Applying the AND rule removes from the Petri-Net all but one of the 
\family typewriter
Places
\family default
 in the set 
\begin_inset Formula $t.prep$
\end_inset

 (
\begin_inset Formula $t.postp$
\end_inset

).
\end_layout

\begin_layout Paragraph
EOL Implementation.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eol-merge-and"

\end_inset

 shows an implementation of the AND rule in EOL.
 Note that the AND rule can be applied in 
\begin_inset Quotes eld
\end_inset

both directions
\begin_inset Quotes erd
\end_inset

 on line 2.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\size tiny
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{eolAND.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:eol-merge-and"

\end_inset

EOL code for performing AND merges (Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visual-documentation-for-rules"

\end_inset

a).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
OR rules
\end_layout

\begin_layout Standard
The second type of reduction rule, OR (informally documented by Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visual-documentation-for-rules"

\end_inset

.b), constructs an 
\family typewriter
OR
\family default
 state for a 
\family typewriter
Transition
\family default
 that has a single preceding 
\family typewriter
Place
\family default
 and single succeeding 
\family typewriter
Place
\family default
.
\end_layout

\begin_layout Paragraph
Pre-conditions.
\end_layout

\begin_layout Standard
The OR rule can be applied to a 
\family typewriter
Transition
\family default
, 
\begin_inset Formula $t$
\end_inset

, iff 
\begin_inset Formula $(\left|t.prep\right|=1)\land(\left|t.postp\right|=1)$
\end_inset

 and there is no transition, 
\begin_inset Formula $t'$
\end_inset

, such that 
\begin_inset Formula $(q\in t'.prep)\land(r\in t'.prep)$
\end_inset

 or 
\begin_inset Formula $(q\in t'.postp)\land(r\in t'.postp)$
\end_inset

 where 
\begin_inset Formula $q$
\end_inset

 is the single place contained in 
\begin_inset Formula $t.prep$
\end_inset

 and 
\begin_inset Formula $r$
\end_inset

 is the single place contained in 
\begin_inset Formula $t.postp$
\end_inset

.
\end_layout

\begin_layout Paragraph
Effect on statechart.
\end_layout

\begin_layout Standard
Applying the OR rule results in the creation of a new 
\family typewriter
OR
\family default
 state (
\begin_inset Formula $p$
\end_inset

) such that 
\begin_inset Formula $p.contains$
\end_inset

 is the set of 
\family typewriter
OR
\family default
 states 
\begin_inset Formula $equiv(q).contains\cup equiv(r).contains$
\end_inset

.
\end_layout

\begin_layout Paragraph
Effect on Petri-Net.
\end_layout

\begin_layout Standard
Applying the OR rule removes from the Petri-Net the 
\family typewriter
Transition
\family default
 
\begin_inset Formula $t$
\end_inset

 and the 
\family typewriter
Places
\family default
 
\begin_inset Formula $q$
\end_inset

 and 
\begin_inset Formula $r$
\end_inset

; and adds a new 
\family typewriter
Place
\family default
 
\begin_inset Formula $p$
\end_inset

 such that 
\begin_inset Formula $p.pret=(q.pret\cup r.pret)$
\end_inset

 and 
\begin_inset Formula $p.postt=(q.postt\cup r.postt)$
\end_inset

.
\end_layout

\begin_layout Paragraph
EOL Implementation.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:eol-merge-or"

\end_inset

 shows an implementation of the OR rule in EOL.
 Note that this implementation re-uses 
\begin_inset Formula $q$
\end_inset

 to form 
\begin_inset Formula $p$
\end_inset

, rather than instantiate a new 
\family typewriter
Place
\family default
 or 
\family typewriter
OR
\family default
 state.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{eolOR.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:eol-merge-or"

\end_inset

EOL code for performing OR merges (Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visual-documentation-for-rules"

\end_inset

b).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Termination
\end_layout

\begin_layout Standard
The output model should contain a single instance of 
\family typewriter
Statechart
\family default
 
\begin_inset Formula $sc$
\end_inset

.
 The transformation should apply the reduction rules as long as possible
 to the input elements.
 For input Petri-Nets in the class of safe nets, the reduction process should
 terminate with exactly one 
\family typewriter
Place
\family default
 left.
 The equivalent 
\family typewriter
AND
\family default
 state 
\begin_inset Formula $st$
\end_inset

 should not have any parent 
\family typewriter
Compound
\family default
 state.
 Moverover, 
\begin_inset Formula $sc.topState=st$
\end_inset

 should hold for 
\begin_inset Formula $sc$
\end_inset

.
 For unsafe input nets, the reduction rules typically cannot produce a unique
 top-level 
\family typewriter
AND
\family default
 state so it is impossible to produce a model that conforms strictly to
 the output model.
 However, in that case the transformation should terminate in a state that
 can only be reached after sequentially applying the reduction rules as
 long as possible.
 It should be possible to inspect the resulting state of the input Petri-Net
 for further analysis purposes.
\end_layout

\begin_layout Section
Example Transformation Execution Trace
\end_layout

\begin_layout Standard
This section demonstrates the intended behavior of the reduction rules from
 the previous section.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visualization-ANDandOR"

\end_inset

 visualizes an execution trace for an input model with 11 places and 10
 transitions.
 The input Petri-Net model is shown on the left of the figure while its
 corresponding statechart is shown at the right of the figure.
 Places are represented as white circles and transitions as black bars.
 Basic states are represented as yellow ovals while hyperedges are represented
 as black bars too.
 OR states are represented as white boxes while AND states are represented
 as gray boxes.
 The top of the figure shows an execution snapshot after initialization.
 Each 
\family typewriter
Place
\family default
 and 
\family typewriter
Transition
\family default
 element has respectively its corresponding 
\family typewriter
Basic
\family default
 state and 
\family typewriter
HyperEdge
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/sequence-trim.pdf
	lyxscale 50
	height 80pheight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Visualization-ANDandOR"

\end_inset

Visualization of an execution trace of the AND and OR reduction rules.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The figure shows downwards subsequent applications of reduction rules.
 The second to fifth snapshots are the result of applying in sequence once
 the AND rule and three times the OR rule.
 From the figure it cannot be determined which variant of the AND rule has
 been applied in the first step since they would both lead to the second
 snapshot in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visualization-ANDandOR"

\end_inset

 The bottom of the figure shows a final application of the OR rule.
 Since the final snapshot contains exactly one input place, the output statechar
t can be considered valid.
 The details of embedding the final structure in a StateChart container
 element are straightforward and not shown in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visualization-ANDandOR"

\end_inset

.
\end_layout

\begin_layout Section
Testsuite and Additional Artifacts
\end_layout

\begin_layout Standard
In this section, we present some testcases that should be used both for
 some basic correctness verification as well as for performance testing.
 The complete testsuite is available in an online repository
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/louismrose/ttc_pn2sc/
\end_layout

\end_inset


\end_layout

\end_inset

.
 Moreover, we provide online access to additional test materials, three
 existing solutions to the case (a Java solution, a GrGen.NET solution and
 an Epsilon solution
\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://is.ieis.tue.nl/staff/pvgorp/share/?page=LookupImage&bNameSearch=pn2sc+benchm
ark
\end_layout

\end_inset

.
\end_layout

\end_inset

) and GMF-based editors with automatic layouting features.
 We will also participate in online discussions related to these materials
 and may submit also improved versions of the existing solutions.
\end_layout

\begin_layout Subsection
Testcase 1: Artificial Example
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/paper-example-pn.png
	width 60line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Testcase-1"

\end_inset

Testcase 1 input, diagram exported from a GMF-based Petri-Net editor.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/paper-example-sc.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Testcase-1-1"

\end_inset

Testcase 1 output, diagram exported from a GMF-based Statechart editor.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Evaluation Criteria
\end_layout

\begin_layout Subsection
Basic Criteria
\end_layout

\begin_layout Subsection
Bonus Criteria
\end_layout

\begin_layout Standard
- ability to formalize safe net class and (semi-)automatically proof that
 reduction rules indeed terminate for that class.
\end_layout

\begin_layout Standard
- ability to use a petri-net simulator for simulating the statechart, or
 vice versa (note: need simple Token extension to MM)
\end_layout

\begin_layout Standard
- rule extension: modular extension to rules for dealing with cross-synchronizat
ion
\end_layout

\begin_layout Section
Format for Presenting Evaluation Results
\end_layout

\begin_layout Standard
Table
\begin_inset space ~
\end_inset

XXX provides an overview of key characteristics of the three existing solutions
 to the case.
 TODO: explain why these aspects, TODO: add performance results
\end_layout

\begin_layout Standard
\begin_inset VSpace 5mm
\end_inset

 
\series bold
Acknowledgements
\series default
: The authors thank Prof.
 Juan de Lara for constructing the initial versions of the Petri-Net and
 statecharts metamodels used in this case.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "pn2sc"
options "plain"

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bibliographystyle{eptcs}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
